version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    environment:
      POSTGRES_DB: ragbot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty12345
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ragbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rag-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: rag-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rag-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: rag-redis
    command: redis-server --requirepass redispassword123 --appendonly yes --save 60 1000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: redispassword123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - rag-network

  # Ollama LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: rag-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
      OLLAMA_ORIGINS: "*"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags", "||", "exit", "1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - rag-network

  # FastAPI Backend (NEW in Phase 3)
  backend:
    build:
      context: .
      dockerfile: deployment/Dockerfile.backend
    container_name: rag-backend
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    environment:
      # Database settings
      DATABASE_URL: postgresql://postgres:qwerty12345@postgres:5432/ragbot
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ragbot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty12345
      
      # Qdrant settings
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION_NAME: documents
      
      # Redis settings
      REDIS_URL: redis://:redispassword123@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redispassword123
      
      # Ollama settings
      OLLAMA_URL: http://ollama:11434
      OLLAMA_MODEL: gemma:2b
      
      # App settings
      APP_NAME: "RAG Desktop API"
      APP_VERSION: "1.0.0"
      DEBUG: "false"
      HOST: "0.0.0.0"
      PORT: 8000
      
      # File upload settings
      MAX_FILE_SIZE_MB: 50
      UPLOAD_DIR: /app/uploads
      
      # Security settings (for future phases)
      JWT_SECRET_KEY: "your_super_secret_jwt_key_change_in_production"
      JWT_ALGORITHM: "HS256"
      JWT_EXPIRE_MINUTES: 1440
      
      # OAuth settings (for future phases)
      GOOGLE_CLIENT_ID: "your_google_client_id_here"
      GOOGLE_CLIENT_SECRET: "your_google_client_secret_here"
      GOOGLE_REDIRECT_URI: "http://localhost:8000/auth/google/callback"
      
      # TAVILY settings (for future phases)
      TAVILY_API_KEY: "your_tavily_api_key_here"
      
      # ML model settings
      EMBEDDING_MODEL: "all-MiniLM-L6-v2"
      EMBEDDING_DIMENSION: 384
      CHUNK_SIZE: 1000
      CHUNK_OVERLAP: 200
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_started
      ollama:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - rag-network

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16